// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Soskd.Infrastructure.Data;

#nullable disable

namespace Soskd.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626185854_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50214b07-28cd-433f-98f3-494ee6173680",
                            Email = "admin@soskd.uz",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SOSKD.UZ",
                            NormalizedUserName = "ADMIN@SOSKD.UZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDmZN4I8FQsPunfUO4zwLoqsv0qCR2b/njb28iXhqZ3pFqdX2NTzxwOpEVmhXUEvBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "15efa566-4740-4d81-9b2d-1340bda47689",
                            TwoFactorEnabled = false,
                            UserName = "admin@soskd.uz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Soskd.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryEn")
                        .HasColumnType("text");

                    b.Property<string>("CategoryRu")
                        .HasColumnType("text");

                    b.Property<string>("CategoryUz")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LargePhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaDescriptionEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaDescriptionRu")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaDescriptionUz")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaTitleEn")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitleRu")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitleUz")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SlugEn")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SlugRu")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SlugUz")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SmallPhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryEn = "Education",
                            CategoryRu = "Образование",
                            CategoryUz = "Ta'lim",
                            CreatedAt = new DateTime(2025, 6, 21, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6528),
                            DescriptionEn = "<p>SOS Children's Village in Tashkent has launched a new educational program. This program focuses on the social and psychological development of children.</p>",
                            DescriptionRu = "<p>SOS Детская деревня в Ташкенте запустила новую образовательную программу. Эта программа направлена на социальное и психологическое развитие детей.</p>",
                            DescriptionUz = "<p>SOS Bolalar shaharchasi Toshkentda yangi ta'lim dasturini boshladi. Ushbu dastur bolalarning ijtimoiy va psixologik rivojlanishiga qaratilgan.</p>",
                            LargePhotoUrl = "/uploads/news/news1_large.jpg",
                            MetaDescriptionEn = "SOS Children's Village in Tashkent has launched a new educational program",
                            MetaDescriptionRu = "SOS Детская деревня в Ташкенте запустила новую образовательную программу",
                            MetaDescriptionUz = "SOS Bolalar shaharchasi Toshkentda yangi ta'lim dasturini boshladi",
                            MetaTitleEn = "SOS Children's Village launches new program",
                            MetaTitleRu = "SOS Детская деревня запустила новую программу",
                            MetaTitleUz = "SOS Bolalar shaharchasi yangi dasturni boshladi",
                            PublishedDate = new DateTime(2025, 6, 21, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6521),
                            SlugEn = "new-program-launched",
                            SlugRu = "novaya-programma-zapuschena",
                            SlugUz = "yangi-dastur-boshlandi",
                            SmallPhotoUrl = "/uploads/news/news1_small.jpg",
                            Status = 1,
                            TitleEn = "SOS Children's Village launches new program",
                            TitleRu = "SOS Детская деревня запустила новую программу",
                            TitleUz = "SOS Bolalar shaharchasi yangi dasturni boshladi",
                            UpdatedAt = new DateTime(2025, 6, 21, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6529)
                        },
                        new
                        {
                            Id = 2,
                            CategoryEn = "Events",
                            CategoryRu = "События",
                            CategoryUz = "Tadbirlar",
                            CreatedAt = new DateTime(2025, 6, 16, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6534),
                            DescriptionEn = "<p>On June 1st, International Children's Day, a large festive event was held at SOS Children's Village. More than 200 children participated in the event.</p>",
                            DescriptionRu = "<p>1 июня, в честь Международного дня детей, в SOS Детской деревне было проведено большое праздничное мероприятие. В мероприятии приняли участие более 200 детей.</p>",
                            DescriptionUz = "<p>1-iyun, Xalqaro bolalar kuni munosabati bilan SOS Bolalar shaharchasida katta bayram tadbiri o'tkazildi. Tadbirda 200 dan ortiq bola qatnashdi.</p>",
                            LargePhotoUrl = "/uploads/news/news2_large.jpg",
                            MetaDescriptionEn = "On June 1st, International Children's Day, a large festive event was held at SOS Children's Village",
                            MetaDescriptionRu = "1 июня, в честь Международного дня детей, в SOS Детской деревне было проведено большое праздничное мероприятие",
                            MetaDescriptionUz = "1-iyun, Xalqaro bolalar kuni munosabati bilan SOS Bolalar shaharchasida katta bayram tadbiri o'tkazildi",
                            MetaTitleEn = "International Children's Day Event",
                            MetaTitleRu = "Мероприятие в честь Международного дня детей",
                            MetaTitleUz = "Xalqaro bolalar kuni tadbiri",
                            PublishedDate = new DateTime(2025, 6, 16, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6534),
                            SlugEn = "childrens-day-event",
                            SlugRu = "den-detej-meropriyatie",
                            SlugUz = "bolalar-kuni-tadbiri",
                            SmallPhotoUrl = "/uploads/news/news2_small.jpg",
                            Status = 1,
                            TitleEn = "International Children's Day Event",
                            TitleRu = "Мероприятие в честь Международного дня детей",
                            TitleUz = "Xalqaro bolalar kuni tadbiri",
                            UpdatedAt = new DateTime(2025, 6, 16, 18, 58, 53, 865, DateTimeKind.Utc).AddTicks(6535)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
