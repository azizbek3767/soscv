// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Soskd.Infrastructure.Data;

#nullable disable

namespace Soskd.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dc34fdb6-25bf-4bac-88cc-8e6d903fb89c",
                            Email = "admin@soskd.uz",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SOSKD.UZ",
                            NormalizedUserName = "ADMIN@SOSKD.UZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELtGGe9wVT3DcGFYFgqu1z6RHnAgy6Wr4ixiGDMkdDObzvq1cA+132bGJo5fDHLNmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4baa68b9-e236-4046-81a8-a27730e2ea75",
                            TwoFactorEnabled = false,
                            UserName = "admin@soskd.uz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Soskd.Domain.Entities.ContactApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.ToTable("ContactApplications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Tashkent",
                            CreatedAt = new DateTime(2024, 11, 26, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.doe@example.com",
                            FullName = "John Doe",
                            IpAddress = "192.168.1.100",
                            Message = "I would like to learn more about your programs and how I can help support the children.",
                            Phone = "+998901234567"
                        },
                        new
                        {
                            Id = 2,
                            City = "Samarkand",
                            CreatedAt = new DateTime(2024, 11, 29, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "maria.petrova@example.com",
                            FullName = "Maria Petrova",
                            IpAddress = "192.168.1.101",
                            Message = "Hello, I am interested in volunteering opportunities. Could you please provide more information about how to get involved?",
                            Phone = "+998907654321"
                        },
                        new
                        {
                            Id = 3,
                            City = "Bukhara",
                            CreatedAt = new DateTime(2024, 11, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Email = "ahmad.karimov@example.com",
                            FullName = "Ahmad Karimov",
                            IpAddress = "192.168.1.102",
                            Message = "Salom! Men SOS Bolalar shaharchasi haqida ko'proq ma'lumot olishni xohlayman. Qanday yordam bera olaman?"
                        });
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryEn")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CategoryRu")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CategoryUz")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUz")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileNameEn")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileNameUz")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<long>("FileSizeBytesEn")
                        .HasColumnType("bigint");

                    b.Property<long>("FileSizeBytesUz")
                        .HasColumnType("bigint");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileUrlEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("FileUrlUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PublishDate");

                    b.HasIndex("Status");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Donation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DonorEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DonorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DonorPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("NextPaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("ParentDonationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PaymentCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("ProcessedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("UpayTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DonorEmail");

                    b.HasIndex("NextPaymentDate");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.HasIndex("ParentDonationId");

                    b.HasIndex("Status");

                    b.HasIndex("Type");

                    b.HasIndex("UpayTransactionId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Soskd.Domain.Entities.MediaAboutUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceLink")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PublishDate");

                    b.HasIndex("Status");

                    b.ToTable("MediaAboutUs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 24, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>Local press published a detailed article about the activities of SOS Children's Village. The article emphasizes the importance of the organization in children's lives.</p>",
                            DescriptionRu = "<p>Местная пресса опубликовала подробную статью о деятельности SOS Детской деревни. В статье подчеркивается важность организации в жизни детей.</p>",
                            DescriptionUz = "<p>Mahalliy matbuot SOS Bolalar shaharchasining faoliyati haqida batafsil maqola chop etdi. Maqolada tashkilotning bolalar hayotidagi ahamiyati ta'kidlangan.</p>",
                            PhotoUrl = "/uploads/media/media1.jpg",
                            PublishDate = new DateTime(2024, 11, 24, 10, 0, 0, 0, DateTimeKind.Utc),
                            SourceLink = "https://kun.uz/news/2024/11/15/sos-bolalar-shaharchasi",
                            Status = 1,
                            TitleEn = "New article about SOS Children's Village",
                            TitleRu = "Новая статья о SOS Детской деревне",
                            TitleUz = "SOS Bolalar shaharchasi haqida yangi maqola",
                            UpdatedAt = new DateTime(2024, 11, 24, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 19, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>A special report about new programs of SOS Children's Village was broadcasted on national television.</p>",
                            DescriptionRu = "<p>На национальном телевидении был показан специальный репортаж о новых программах SOS Детской деревни.</p>",
                            DescriptionUz = "<p>Milliy televidenie kanalida SOS Bolalar shaharchasining yangi dasturlari haqida maxsus reportaj efirga uzatildi.</p>",
                            PhotoUrl = "/uploads/media/media2.jpg",
                            PublishDate = new DateTime(2024, 11, 19, 10, 0, 0, 0, DateTimeKind.Utc),
                            SourceLink = "https://uzreport.news/society/sos-bolalar-shaharchasi-yangi-dasturlar",
                            Status = 1,
                            TitleEn = "Television coverage of SOS programs",
                            TitleRu = "Телевидение о программах SOS",
                            TitleUz = "Televidenie SOS dasturlari haqida",
                            UpdatedAt = new DateTime(2024, 11, 19, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Soskd.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryEn")
                        .HasColumnType("text");

                    b.Property<string>("CategoryRu")
                        .HasColumnType("text");

                    b.Property<string>("CategoryUz")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LargePhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaDescriptionEn")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaDescriptionRu")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaDescriptionUz")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("MetaTitleEn")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitleRu")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("MetaTitleUz")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SlugEn")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SlugRu")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SlugUz")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("SmallPhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryEn = "Education",
                            CategoryRu = "Образование",
                            CategoryUz = "Ta'lim",
                            CreatedAt = new DateTime(2024, 11, 26, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>SOS Children's Village in Tashkent has launched a new educational program. This program focuses on the social and psychological development of children.</p>",
                            DescriptionRu = "<p>SOS Детская деревня в Ташкенте запустила новую образовательную программу. Эта программа направлена на социальное и психологическое развитие детей.</p>",
                            DescriptionUz = "<p>SOS Bolalar shaharchasi Toshkentda yangi ta'lim dasturini boshladi. Ushbu dastur bolalarning ijtimoiy va psixologik rivojlanishiga qaratilgan.</p>",
                            LargePhotoUrl = "/uploads/news/news1_large.jpg",
                            MetaDescriptionEn = "SOS Children's Village in Tashkent has launched a new educational program",
                            MetaDescriptionRu = "SOS Детская деревня в Ташкенте запустила новую образовательную программу",
                            MetaDescriptionUz = "SOS Bolalar shaharchasi Toshkentda yangi ta'lim dasturini boshladi",
                            MetaTitleEn = "SOS Children's Village launches new program",
                            MetaTitleRu = "SOS Детская деревня запустила новую программу",
                            MetaTitleUz = "SOS Bolalar shaharchasi yangi dasturni boshladi",
                            PublishedDate = new DateTime(2024, 11, 26, 10, 0, 0, 0, DateTimeKind.Utc),
                            SlugEn = "new-program-launched",
                            SlugRu = "novaya-programma-zapuschena",
                            SlugUz = "yangi-dastur-boshlandi",
                            SmallPhotoUrl = "/uploads/news/news1_small.jpg",
                            Status = 1,
                            TitleEn = "SOS Children's Village launches new program",
                            TitleRu = "SOS Детская деревня запустила новую программу",
                            TitleUz = "SOS Bolalar shaharchasi yangi dasturni boshladi",
                            UpdatedAt = new DateTime(2024, 11, 26, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CategoryEn = "Events",
                            CategoryRu = "События",
                            CategoryUz = "Tadbirlar",
                            CreatedAt = new DateTime(2024, 11, 21, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>On June 1st, International Children's Day, a large festive event was held at SOS Children's Village. More than 200 children participated in the event.</p>",
                            DescriptionRu = "<p>1 июня, в честь Международного дня детей, в SOS Детской деревне было проведено большое праздничное мероприятие. В мероприятии приняли участие более 200 детей.</p>",
                            DescriptionUz = "<p>1-iyun, Xalqaro bolalar kuni munosabati bilan SOS Bolalar shaharchasida katta bayram tadbiri o'tkazildi. Tadbirda 200 dan ortiq bola qatnashdi.</p>",
                            LargePhotoUrl = "/uploads/news/news2_large.jpg",
                            MetaDescriptionEn = "On June 1st, International Children's Day, a large festive event was held at SOS Children's Village",
                            MetaDescriptionRu = "1 июня, в честь Международного дня детей, в SOS Детской деревне было проведено большое праздничное мероприятие",
                            MetaDescriptionUz = "1-iyun, Xalqaro bolalar kuni munosabati bilan SOS Bolalar shaharchasida katta bayram tadbiri o'tkazildi",
                            MetaTitleEn = "International Children's Day Event",
                            MetaTitleRu = "Мероприятие в честь Международного дня детей",
                            MetaTitleUz = "Xalqaro bolalar kuni tadbiri",
                            PublishedDate = new DateTime(2024, 11, 21, 10, 0, 0, 0, DateTimeKind.Utc),
                            SlugEn = "childrens-day-event",
                            SlugRu = "den-detej-meropriyatie",
                            SlugUz = "bolalar-kuni-tadbiri",
                            SmallPhotoUrl = "/uploads/news/news2_small.jpg",
                            Status = 1,
                            TitleEn = "International Children's Day Event",
                            TitleRu = "Мероприятие в честь Международного дня детей",
                            TitleUz = "Xalqaro bolalar kuni tadbiri",
                            UpdatedAt = new DateTime(2024, 11, 21, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Sponsor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("Status");

                    b.ToTable("Sponsors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 11, 10, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 1,
                            Link = "https://www.microsoft.com",
                            PhotoUrl = "/uploads/sponsors/microsoft_logo.png",
                            Status = 1,
                            TitleEn = "Microsoft Corporation",
                            TitleRu = "Корпорация Майкрософт",
                            TitleUz = "Microsoft Corporation",
                            UpdatedAt = new DateTime(2024, 11, 11, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 13, 10, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 2,
                            Link = "https://www.google.com",
                            PhotoUrl = "/uploads/sponsors/google_logo.png",
                            Status = 1,
                            TitleEn = "Google LLC",
                            TitleRu = "Гугл ЛЛК",
                            TitleUz = "Google LLC",
                            UpdatedAt = new DateTime(2024, 11, 13, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 11, 16, 10, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 3,
                            Link = "https://www.apple.com",
                            PhotoUrl = "/uploads/sponsors/apple_logo.png",
                            Status = 1,
                            TitleEn = "Apple Inc.",
                            TitleRu = "Эппл Инк.",
                            TitleUz = "Apple Inc.",
                            UpdatedAt = new DateTime(2024, 11, 16, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 11, 21, 10, 0, 0, 0, DateTimeKind.Utc),
                            DisplayOrder = 4,
                            Link = "https://www.meta.com",
                            PhotoUrl = "/uploads/sponsors/meta_logo.png",
                            Status = 2,
                            TitleEn = "Meta Platforms",
                            TitleRu = "Мета Платформс",
                            TitleUz = "Meta Platforms",
                            UpdatedAt = new DateTime(2024, 11, 21, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Vacancy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescriptionEn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionRu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DescriptionUz")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TitleEn")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleRu")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("TitleUz")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Deadline");

                    b.HasIndex("PublishedDate");

                    b.HasIndex("Status");

                    b.ToTable("Vacancies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 11, 28, 10, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2024, 12, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>SOS Children's Village is looking for a Social Worker. The candidate should have experience working with children.</p><p><strong>Requirements:</strong></p><ul><li>Social work or psychology degree</li><li>Minimum 2 years of experience</li><li>Knowledge of Uzbek and Russian languages</li></ul>",
                            DescriptionRu = "<p>SOS Детская деревня ищет сотрудника на должность социального работника. Кандидат должен иметь опыт работы с детьми.</p><p><strong>Требования:</strong></p><ul><li>Специальность социальная работа или психология</li><li>Минимум 2 года опыта работы</li><li>Знание узбекского и русского языков</li></ul>",
                            DescriptionUz = "<p>SOS Bolalar shaharchasi ijtimoiy ishchi lavozimiga xodim izlaydi. Nomzod bolalar bilan ishlash tajribasiga ega bo'lishi kerak.</p><p><strong>Talablar:</strong></p><ul><li>Ijtimoiy ish yoki psixologiya mutaxassisligi</li><li>Kamida 2 yil ish tajribasi</li><li>O'zbek va rus tillarini bilish</li></ul>",
                            PublishedDate = new DateTime(2024, 11, 28, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            TitleEn = "Social Worker",
                            TitleRu = "Социальный работник",
                            TitleUz = "Ijtimoiy ishchi",
                            UpdatedAt = new DateTime(2024, 11, 28, 10, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 11, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Deadline = new DateTime(2024, 12, 22, 10, 0, 0, 0, DateTimeKind.Utc),
                            DescriptionEn = "<p>An Education Coordinator is needed to plan and implement educational programs.</p><p><strong>Responsibilities:</strong></p><ul><li>Develop educational programs</li><li>Work with teachers</li><li>Prepare reports</li></ul>",
                            DescriptionRu = "<p>Требуется координатор по планированию и реализации образовательных программ.</p><p><strong>Обязанности:</strong></p><ul><li>Разработка образовательных программ</li><li>Работа с учителями</li><li>Подготовка отчетов</li></ul>",
                            DescriptionUz = "<p>Ta'lim dasturlarini rejalashtirish va amalga oshirish bo'yicha koordinator zarur.</p><p><strong>Mas'uliyatlar:</strong></p><ul><li>Ta'lim dasturlarini ishlab chiqish</li><li>O'qituvchilar bilan ishlash</li><li>Hisobotlar tayyorlash</li></ul>",
                            PublishedDate = new DateTime(2024, 11, 30, 10, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            TitleEn = "Education Coordinator",
                            TitleRu = "Координатор по образованию",
                            TitleUz = "Ta'lim koordinatori",
                            UpdatedAt = new DateTime(2024, 11, 30, 10, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Soskd.Domain.Entities.VacancyApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ResumeFileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ResumeUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("VacancyId")
                        .HasColumnType("integer");

                    b.Property<string>("VacancyTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Email");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancyApplications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Donation", b =>
                {
                    b.HasOne("Soskd.Domain.Entities.Donation", "ParentDonation")
                        .WithMany("RecurringPayments")
                        .HasForeignKey("ParentDonationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentDonation");
                });

            modelBuilder.Entity("Soskd.Domain.Entities.VacancyApplication", b =>
                {
                    b.HasOne("Soskd.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany()
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("Soskd.Domain.Entities.Donation", b =>
                {
                    b.Navigation("RecurringPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
