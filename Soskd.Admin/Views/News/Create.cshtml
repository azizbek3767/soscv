<!-- Soskd.Admin/Views/News/Create.cshtml - DEBUG VERSION -->
@model Soskd.Admin.ViewModels.NewsViewModel
@{
    ViewData["Title"] = "Create News - DEBUG MODE";
}

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="h3 mb-0 text-gray-800">
                <i class="fas fa-plus-circle me-2 text-primary"></i>Create News <span class="badge bg-warning">DEBUG MODE</span>
            </h1>
            <a class="btn btn-outline-secondary" asp-action="Index">
                <i class="fas fa-arrow-left me-2"></i>Back to List
            </a>
        </div>
    </div>
</div>

<!-- Debug Console -->
<div class="alert alert-info" role="alert">
    <h6><i class="fas fa-bug me-2"></i>Debug Console</h6>
    <div id="debugConsole" style="max-height: 200px; overflow-y: auto; background: #f8f9fa; padding: 10px; border-radius: 5px; font-family: monospace; font-size: 12px;">
        <div>Debug console initialized...</div>
    </div>
</div>

<!-- Display any errors -->
@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <h6><i class="fas fa-exclamation-triangle me-2"></i>ModelState Errors:</h6>
        <ul class="mb-0">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
            {
                <li>@error.ErrorMessage</li>
            }
        </ul>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<form asp-action="Create" method="post" enctype="multipart/form-data" id="newsForm">
    <div class="row">
        <div class="col-lg-8">
            <!-- Uzbek Content Information -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-flag me-2 text-primary"></i>Uzbek Content Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="TitleUz" class="form-label">
                            <i class="fas fa-heading me-1"></i>@Html.DisplayNameFor(m => m.TitleUz) <span class="text-danger">*</span>
                        </label>
                        <input asp-for="TitleUz" class="form-control debug-field" placeholder="Enter title in Uzbek" required />
                        <span asp-validation-for="TitleUz" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="DescriptionUz" class="form-label">
                            <i class="fas fa-align-left me-1"></i>@Html.DisplayNameFor(m => m.DescriptionUz) <span class="text-danger">*</span>
                        </label>
                        <textarea asp-for="DescriptionUz" class="form-control rich-text-editor debug-field" rows="4" required></textarea>
                        <span asp-validation-for="DescriptionUz" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="SlugUz" class="form-label">
                            <i class="fas fa-link me-1"></i>@Html.DisplayNameFor(m => m.SlugUz)
                        </label>
                        <input asp-for="SlugUz" class="form-control debug-field" placeholder="Auto-generated if empty" />
                        <span asp-validation-for="SlugUz" class="text-danger small"></span>
                        <div class="form-text">URL-friendly version of the title. Leave empty for auto-generation.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaTitleUz" class="form-label">
                            <i class="fas fa-tags me-1"></i>@Html.DisplayNameFor(m => m.MetaTitleUz)
                        </label>
                        <input asp-for="MetaTitleUz" class="form-control debug-field" placeholder="Uses title if empty" />
                        <span asp-validation-for="MetaTitleUz" class="text-danger small"></span>
                        <div class="form-text">SEO title for search engines. Uses main title if empty.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaDescriptionUz" class="form-label">
                            <i class="fas fa-file-text me-1"></i>@Html.DisplayNameFor(m => m.MetaDescriptionUz)
                        </label>
                        <textarea asp-for="MetaDescriptionUz" class="form-control debug-field" rows="2" placeholder="Uses title if empty"></textarea>
                        <span asp-validation-for="MetaDescriptionUz" class="text-danger small"></span>
                        <div class="form-text">SEO description for search engines. Uses main title if empty.</div>
                    </div>
                </div>
            </div>

            <!-- Russian Content Information -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-flag me-2 text-primary"></i>Russian Content Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="TitleRu" class="form-label">
                            <i class="fas fa-heading me-1"></i>@Html.DisplayNameFor(m => m.TitleRu) <span class="text-danger">*</span>
                        </label>
                        <input asp-for="TitleRu" class="form-control debug-field" placeholder="Enter title in Russian" required />
                        <span asp-validation-for="TitleRu" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="DescriptionRu" class="form-label">
                            <i class="fas fa-align-left me-1"></i>@Html.DisplayNameFor(m => m.DescriptionRu) <span class="text-danger">*</span>
                        </label>
                        <textarea asp-for="DescriptionRu" class="form-control rich-text-editor debug-field" rows="4" required></textarea>
                        <span asp-validation-for="DescriptionRu" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="SlugRu" class="form-label">
                            <i class="fas fa-link me-1"></i>@Html.DisplayNameFor(m => m.SlugRu)
                        </label>
                        <input asp-for="SlugRu" class="form-control debug-field" placeholder="Auto-generated if empty" />
                        <span asp-validation-for="SlugRu" class="text-danger small"></span>
                        <div class="form-text">URL-friendly version of the title. Leave empty for auto-generation.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaTitleRu" class="form-label">
                            <i class="fas fa-tags me-1"></i>@Html.DisplayNameFor(m => m.MetaTitleRu)
                        </label>
                        <input asp-for="MetaTitleRu" class="form-control debug-field" placeholder="Uses title if empty" />
                        <span asp-validation-for="MetaTitleRu" class="text-danger small"></span>
                        <div class="form-text">SEO title for search engines. Uses main title if empty.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaDescriptionRu" class="form-label">
                            <i class="fas fa-file-text me-1"></i>@Html.DisplayNameFor(m => m.MetaDescriptionRu)
                        </label>
                        <textarea asp-for="MetaDescriptionRu" class="form-control debug-field" rows="2" placeholder="Uses title if empty"></textarea>
                        <span asp-validation-for="MetaDescriptionRu" class="text-danger small"></span>
                        <div class="form-text">SEO description for search engines. Uses main title if empty.</div>
                    </div>
                </div>
            </div>

            <!-- English Content Information -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-flag me-2 text-primary"></i>English Content Information
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="TitleEn" class="form-label">
                            <i class="fas fa-heading me-1"></i>@Html.DisplayNameFor(m => m.TitleEn) <span class="text-danger">*</span>
                        </label>
                        <input asp-for="TitleEn" class="form-control debug-field" placeholder="Enter title in English" required />
                        <span asp-validation-for="TitleEn" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="DescriptionEn" class="form-label">
                            <i class="fas fa-align-left me-1"></i>@Html.DisplayNameFor(m => m.DescriptionEn) <span class="text-danger">*</span>
                        </label>
                        <textarea asp-for="DescriptionEn" class="form-control rich-text-editor debug-field" rows="4" required></textarea>
                        <span asp-validation-for="DescriptionEn" class="text-danger small"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="SlugEn" class="form-label">
                            <i class="fas fa-link me-1"></i>@Html.DisplayNameFor(m => m.SlugEn)
                        </label>
                        <input asp-for="SlugEn" class="form-control debug-field" placeholder="Auto-generated if empty" />
                        <span asp-validation-for="SlugEn" class="text-danger small"></span>
                        <div class="form-text">URL-friendly version of the title. Leave empty for auto-generation.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaTitleEn" class="form-label">
                            <i class="fas fa-tags me-1"></i>@Html.DisplayNameFor(m => m.MetaTitleEn)
                        </label>
                        <input asp-for="MetaTitleEn" class="form-control debug-field" placeholder="Uses title if empty" />
                        <span asp-validation-for="MetaTitleEn" class="text-danger small"></span>
                        <div class="form-text">SEO title for search engines. Uses main title if empty.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="MetaDescriptionEn" class="form-label">
                            <i class="fas fa-file-text me-1"></i>@Html.DisplayNameFor(m => m.MetaDescriptionEn)
                        </label>
                        <textarea asp-for="MetaDescriptionEn" class="form-control debug-field" rows="2" placeholder="Uses title if empty"></textarea>
                        <span asp-validation-for="MetaDescriptionEn" class="text-danger small"></span>
                        <div class="form-text">SEO description for search engines. Uses main title if empty.</div>
                    </div>
                </div>
            </div>

            <!-- Photos (Common for all languages) -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-images me-2 text-primary"></i>Photos
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label asp-for="SmallPhoto" class="form-label">
                                <i class="fas fa-image me-1"></i>@Html.DisplayNameFor(m => m.SmallPhoto) <span class="text-danger">*</span>
                            </label>
                            <input asp-for="SmallPhoto" class="form-control debug-file" type="file" accept="image/*" required />
                            <span asp-validation-for="SmallPhoto" class="text-danger small"></span>
                            <div class="form-text">Recommended size: 400x300px. Required for news listing.</div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label asp-for="LargePhoto" class="form-label">
                                <i class="fas fa-image me-1"></i>@Html.DisplayNameFor(m => m.LargePhoto)
                            </label>
                            <input asp-for="LargePhoto" class="form-control debug-file" type="file" accept="image/*" />
                            <span asp-validation-for="LargePhoto" class="text-danger small"></span>
                            <div class="form-text">Recommended size: 800x600px. Optional for detailed view.</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4">
            <!-- Publication Settings -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-white border-bottom">
                    <h6 class="card-title mb-0">
                        <i class="fas fa-cog me-2 text-primary"></i>Publication Settings
                    </h6>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Category" class="form-label">
                            <i class="fas fa-tag me-1"></i>@Html.DisplayNameFor(m => m.Category)
                        </label>
                        <select asp-for="Category" class="form-select debug-field">
                            <option value="">Select Category</option>
                            @foreach (var category in ViewBag.Categories as List<(Soskd.Domain.Enums.NewsCategory Category, string Uz, string Ru, string En)>)
                            {
                                <option value="@category.Category">@category.En</option>
                            }
                        </select>
                        <span asp-validation-for="Category" class="text-danger small"></span>
                        <div class="form-text">Optional. Helps organize news content.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Status" class="form-label">
                            <i class="fas fa-eye me-1"></i>@Html.DisplayNameFor(m => m.Status) <span class="text-danger">*</span>
                        </label>
                        <select asp-for="Status" class="form-select debug-field" required>
                            <option value="1" selected>Published</option>
                            <option value="2">Unpublished</option>
                        </select>
                        <span asp-validation-for="Status" class="text-danger small"></span>
                        <div class="form-text">Published news will be visible on website.</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="PublishedDate" class="form-label">
                            <i class="fas fa-calendar me-1"></i>@Html.DisplayNameFor(m => m.PublishedDate) <span class="text-danger">*</span>
                        </label>
                        <input asp-for="PublishedDate" class="form-control debug-field" type="datetime-local" required />
                        <span asp-validation-for="PublishedDate" class="text-danger small"></span>
                        <div class="form-text">When this news should be published.</div>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
                            <i class="fas fa-save me-2"></i>Create News
                        </button>
                        <a class="btn btn-outline-secondary" asp-action="Index">
                            <i class="fas fa-times me-2"></i>Cancel
                        </a>
                        <button type="button" class="btn btn-info" id="debugBtn">
                            <i class="fas fa-bug me-2"></i>Debug Form Data
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts {
    <!-- Load validation scripts AFTER jQuery -->
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation@1.19.5/dist/jquery.validate.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-validation-unobtrusive@3.2.11/dist/jquery.validate.unobtrusive.min.js"></script>
    <script>
        // SLUG FORMATTING FUNCTIONS
        function formatSlug(input) {
            if (!input) return '';

            return input
                .toLowerCase()                    // Convert to lowercase
                .replace(/\s+/g, ' ')            // Replace multiple spaces with single space
                .trim()                          // Remove leading/trailing spaces
                .replace(/\s/g, '-')             // Replace spaces with hyphens
                .replace(/['"]/g, '')            // Remove quotes
                .replace(/[^\w\-]/g, '')         // Remove special characters except hyphens and word chars
                .replace(/-+/g, '-')             // Replace multiple hyphens with single hyphen
                .replace(/^-+|-+$/g, '');        // Remove leading/trailing hyphens
        }

        function formatSlugAdvanced(input) {
            if (!input) return '';

            // Cyrillic to Latin transliteration map
            const cyrillicMap = {
                'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ё': 'yo',
                'ж': 'zh', 'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm',
                'н': 'n', 'о': 'o', 'п': 'p', 'р': 'r', 'с': 's', 'т': 't', 'у': 'u',
                'ф': 'f', 'х': 'kh', 'ц': 'ts', 'ч': 'ch', 'ш': 'sh', 'щ': 'shch',
                'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya',
                'ў': 'o', 'қ': 'q', 'ҳ': 'h', 'ғ': 'g'
            };

            let result = input.toLowerCase();

            for (const [cyrillic, latin] of Object.entries(cyrillicMap)) {
                result = result.replace(new RegExp(cyrillic, 'g'), latin);
            }

            return result
                .replace(/\s+/g, ' ')
                .trim()
                .replace(/\s/g, '-')
                .replace(/[^a-z0-9\-]/g, '')
                .replace(/-+/g, '-')
                .replace(/^-+|-+$/g, '');
        }

        function showSlugFormatNotification(original, formatted) {
            const toast = document.createElement('div');
            toast.innerHTML = `
                <div class="alert alert-success alert-dismissible fade show position-fixed"
                     style="top: 20px; right: 20px; z-index: 9999; max-width: 400px;" role="alert">
                    <i class="fas fa-magic me-2"></i>
                    <strong>Slug formatted!</strong><br>
                    <small>"${original}" → "${formatted}"</small>
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }

        // Debug console functionality
        function debugLog(message) {
            const debugConsole = document.getElementById('debugConsole');
            const timestamp = new Date().toLocaleTimeString();
            debugConsole.innerHTML += `<div>${timestamp}: ${message}</div>`;
            debugConsole.scrollTop = debugConsole.scrollHeight;
            console.log(`[DEBUG] ${message}`);
        }

        $(document).ready(function() {
            debugLog('DEBUG MODE: Create News page loaded');
            debugLog('jQuery version: ' + $.fn.jquery);
            debugLog('TinyMCE available: ' + (typeof tinymce !== 'undefined'));

            // Set default datetime
            const publishedDateInput = $('#PublishedDate');
            if (publishedDateInput.length && !publishedDateInput.val()) {
                const now = new Date();
                const offset = now.getTimezoneOffset() * 60000;
                const localISOTime = (new Date(now - offset)).toISOString().slice(0, -1);
                publishedDateInput.val(localISOTime.substring(0, 16));
                debugLog('Default date set: ' + localISOTime.substring(0, 16));
            }

            // SETUP SLUG FORMATTING
            debugLog('Setting up real-time slug formatting...');

            const slugFields = $('input[name$="SlugUz"], input[name$="SlugRu"], input[name$="SlugEn"]');

            slugFields.each(function() {
                const field = $(this);
                const fieldName = field.attr('name');

                debugLog('Setting up slug formatting for: ' + fieldName);

                // Add visual indicators
                field.attr('placeholder', 'Auto-formatted on blur (e.g., "Hello World" → "hello-world")');
                field.css('font-family', 'monospace');

                // Format on blur
                field.on('blur', function() {
                    const originalValue = this.value;

                    if (originalValue.trim()) {
                        const isEnglish = fieldName.includes('SlugEn');
                        const formattedValue = isEnglish ?
                            formatSlug(originalValue) :
                            formatSlugAdvanced(originalValue);

                        if (formattedValue !== originalValue) {
                            this.value = formattedValue;

                            // Visual feedback
                            $(this).css({
                                'background-color': '#d4edda',
                                'border-color': '#28a745'
                            });

                            showSlugFormatNotification(originalValue, formattedValue);
                            debugLog(`Slug formatted: "${originalValue}" → "${formattedValue}"`);

                            setTimeout(() => {
                                $(this).css({
                                    'background-color': '',
                                    'border-color': ''
                                });
                            }, 2000);
                        }
                    }
                });

                // Format on Enter key
                field.on('keydown', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        $(this).blur();
                    }
                });

                // Show preview while typing
                field.on('input', function() {
                    const currentValue = this.value;
                    if (currentValue.trim()) {
                        const isEnglish = fieldName.includes('SlugEn');
                        const preview = isEnglish ?
                            formatSlug(currentValue) :
                            formatSlugAdvanced(currentValue);

                        if (preview !== currentValue) {
                            $(this).attr('title', `Will become: ${preview}`);
                        } else {
                            $(this).removeAttr('title');
                        }
                    }
                });
            });

            // SETUP AUTO-SLUG GENERATION FROM TITLES
            debugLog('Setting up auto-slug generation from titles...');

            const titleFields = $('input[name$="TitleUz"], input[name$="TitleRu"], input[name$="TitleEn"]');

            titleFields.each(function() {
                const titleField = $(this);
                const language = titleField.attr('name').slice(-2); // Get "Uz", "Ru", or "En"
                const slugField = $(`input[name$="Slug${language}"]`);

                if (slugField.length) {
                    titleField.on('blur', function() {
                        // Only auto-generate if slug field is empty
                        if (!slugField.val().trim() && this.value.trim()) {
                            const isEnglish = language === 'En';
                            const autoSlug = isEnglish ?
                                formatSlug(this.value) :
                                formatSlugAdvanced(this.value);

                            slugField.val(autoSlug);

                            // Visual feedback
                            slugField.css({
                                'background-color': '#fff3cd',
                                'border-color': '#ffc107'
                            });

                            setTimeout(() => {
                                slugField.css({
                                    'background-color': '',
                                    'border-color': ''
                                });
                            }, 2000);

                            debugLog(`Auto-generated ${language} slug: "${autoSlug}" from title: "${this.value}"`);
                        }
                    });
                }
            });

            // Monitor field changes for debugging
            $('.debug-field').on('change input', function() {
                const fieldName = $(this).attr('name');
                const value = $(this).val();
                debugLog(`Field changed: ${fieldName} = "${value ? value.substring(0, 50) + (value.length > 50 ? '...' : '') : 'EMPTY'}"`);
            });

            // Monitor file inputs
            $('.debug-file').on('change', function() {
                const fieldName = $(this).attr('name');
                const file = this.files[0];
                if (file) {
                    debugLog(`File selected: ${fieldName} = "${file.name}" (${file.size} bytes)`);
                } else {
                    debugLog(`File cleared: ${fieldName}`);
                }
            });

            // Debug button
            $('#debugBtn').on('click', function() {
                debugLog('=== MANUAL DEBUG TRIGGERED ===');

                // Force TinyMCE save
                if (typeof tinymce !== 'undefined') {
                    debugLog('Saving TinyMCE content...');
                    tinymce.triggerSave();
                }

                // Check all form fields
                $('#newsForm').find('input, textarea, select').each(function() {
                    const fieldName = $(this).attr('name');
                    const value = $(this).val();
                    const isRequired = $(this).attr('required') !== undefined;
                    const isEmpty = !value || value.trim() === '';

                    debugLog(`${fieldName}: "${value ? value.substring(0, 30) + (value.length > 30 ? '...' : '') : 'EMPTY'}" ${isRequired ? '[REQUIRED]' : '[OPTIONAL]'} ${isEmpty && isRequired ? '[ERROR]' : '[OK]'}`);
                });
            });

            // Enhanced form submission with detailed debugging
            $('#newsForm').on('submit', function(e) {
                debugLog('=== FORM SUBMISSION STARTED ===');

                // Force TinyMCE to save content
                if (typeof tinymce !== 'undefined') {
                    debugLog('Saving TinyMCE content...');
                    tinymce.triggerSave();

                    // Check TinyMCE content
                    $('.rich-text-editor').each(function() {
                        const content = $(this).val();
                        const fieldName = $(this).attr('name');
                        debugLog(`TinyMCE ${fieldName}: ${content ? content.length + ' characters' : 'EMPTY'}`);
                    });
                }

                // Validate required fields
                let isValid = true;
                let missingFields = [];

                $(this).find('[required]').each(function() {
                    const value = $(this).val();
                    const fieldName = $(this).attr('name') || $(this).prev('label').text() || 'Unknown';

                    if (!value || value.trim() === '') {
                        missingFields.push(fieldName);
                        $(this).addClass('is-invalid');
                        isValid = false;
                        debugLog(`VALIDATION ERROR: ${fieldName} is empty`);
                    } else {
                        $(this).removeClass('is-invalid').addClass('is-valid');
                        debugLog(`VALIDATION OK: ${fieldName} has value`);
                    }
                });

                if (!isValid) {
                    e.preventDefault();
                    debugLog('=== FORM SUBMISSION BLOCKED - VALIDATION FAILED ===');
                    alert('Please fill in all required fields:\n- ' + missingFields.join('\n- '));
                    return false;
                }

                // Show loading state
                const submitBtn = $('#submitBtn');
                const originalText = submitBtn.html();
                submitBtn.html('<i class="fas fa-spinner fa-spin me-2"></i>Submitting...').prop('disabled', true);

                debugLog('=== FORM VALIDATION PASSED - SUBMITTING TO SERVER ===');

                // Re-enable button after timeout in case of issues
                setTimeout(function() {
                    submitBtn.html(originalText).prop('disabled', false);
                    debugLog('Submit button re-enabled after timeout');
                }, 60000);

                return true;
            });

            debugLog('All event handlers attached successfully');
        });
    </script>
}